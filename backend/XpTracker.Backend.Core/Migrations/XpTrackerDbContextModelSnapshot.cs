// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using XpTracker.Backend.Core.Repo.Common;

namespace XpTracker.Backend.Core.Migrations
{
    [DbContext(typeof(XpTrackerDbContext))]
    partial class XpTrackerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("XpTracker.Backend.Core.Model.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Client");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Employer");

                    b.Property<string>("JobTitle");

                    b.Property<string>("Management");

                    b.Property<string>("MissionDescription");

                    b.Property<int?>("PeriodId");

                    b.Property<int?>("RealTimeOfWorkId");

                    b.Property<string>("Remarks");

                    b.Property<string>("TeamSize");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.HasIndex("RealTimeOfWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("XpTracker.Backend.Core.Model.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("EndYear");

                    b.Property<DateTime>("StartYear");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Period");
                });

            modelBuilder.Entity("XpTracker.Backend.Core.Model.RealTimeOfWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("TimeSpan");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.ToTable("RealTimeOfWork");
                });

            modelBuilder.Entity("XpTracker.Backend.Core.Model.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<int?>("ExperienceId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Number");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("XpTracker.Backend.Core.Model.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("ExperienceId");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("XpTracker.Backend.Core.Model.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("ExperienceId");

                    b.Property<int?>("ExperienceId1");

                    b.Property<string>("Name");

                    b.Property<int>("TechnologyType");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("ExperienceId1");

                    b.ToTable("Technology");
                });

            modelBuilder.Entity("XpTracker.Backend.Core.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("XpTracker.Backend.Core.Model.Experience", b =>
                {
                    b.HasOne("XpTracker.Backend.Core.Model.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");

                    b.HasOne("XpTracker.Backend.Core.Model.RealTimeOfWork", "RealTimeOfWork")
                        .WithMany()
                        .HasForeignKey("RealTimeOfWorkId");

                    b.HasOne("XpTracker.Backend.Core.Model.User")
                        .WithMany("Experiences")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("XpTracker.Backend.Core.Model.Reference", b =>
                {
                    b.HasOne("XpTracker.Backend.Core.Model.Experience")
                        .WithMany("References")
                        .HasForeignKey("ExperienceId");
                });

            modelBuilder.Entity("XpTracker.Backend.Core.Model.Tag", b =>
                {
                    b.HasOne("XpTracker.Backend.Core.Model.Experience")
                        .WithMany("Tags")
                        .HasForeignKey("ExperienceId");
                });

            modelBuilder.Entity("XpTracker.Backend.Core.Model.Technology", b =>
                {
                    b.HasOne("XpTracker.Backend.Core.Model.Experience")
                        .WithMany("CodeTechnologies")
                        .HasForeignKey("ExperienceId");

                    b.HasOne("XpTracker.Backend.Core.Model.Experience")
                        .WithMany("EnvironmentTechnologies")
                        .HasForeignKey("ExperienceId1");
                });
#pragma warning restore 612, 618
        }
    }
}
